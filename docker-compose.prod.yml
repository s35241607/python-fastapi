# Enterprise Ticket Management System - Docker Production Setup

version: '3.8'

services:
  # Frontend - Vue 3 Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
    image: tickets/frontend:1.0.0
    container_name: tickets-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/ssl/certs:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - frontend_network
      - backend_network
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://backend:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend - FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        - ENVIRONMENT=production
    image: tickets/backend:1.0.0
    container_name: tickets-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
      - ./backend/config:/app/config:ro
    depends_on:
      - postgres
      - redis
    networks:
      - backend_network
      - database_network
    environment:
      # Application Settings
      - APP_NAME=Enterprise Ticket Management System
      - ENVIRONMENT=production
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      
      # Database Configuration
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=30
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # Email Configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      
      # File Storage
      - UPLOAD_PATH=/app/uploads
      - MAX_FILE_SIZE=26214400
      
      # Security
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=60
      - PASSWORD_MIN_LENGTH=8
      - RATE_LIMIT_PER_MINUTE=1000
      
      # External Integrations
      - TEAMS_WEBHOOK_URL=${TEAMS_WEBHOOK_URL}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      
      # Performance
      - WORKER_PROCESSES=4
      - ENABLE_METRICS=true
      - LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database - PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: tickets-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
      - postgres_logs:/var/log/postgresql
    networks:
      - database_network
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=en_US.UTF-8
      - PGDATA=/var/lib/postgresql/data/pgdata
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c max_connections=200
      -c log_statement=mod
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Cache - Redis
  redis:
    image: redis:7-alpine
    container_name: tickets-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - backend_network
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Load Balancer - HAProxy
  loadbalancer:
    image: haproxy:2.8-alpine
    container_name: tickets-haproxy
    restart: unless-stopped
    ports:
      - "8080:8080"   # Admin interface
      - "8443:8443"   # Load balanced backend
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./ssl:/etc/ssl:ro
      - haproxy_logs:/var/log/haproxy
    depends_on:
      - backend
    networks:
      - frontend_network
      - backend_network
    environment:
      - HAPROXY_STATS_USER=${HAPROXY_STATS_USER}
      - HAPROXY_STATS_PASSWORD=${HAPROXY_STATS_PASSWORD}

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: tickets-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring_network
      - backend_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Visualization - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: tickets-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring_network
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus

  # Log Aggregation - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: tickets-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - logging_network
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: tickets-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    volumes:
      - ./logging/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    networks:
      - logging_network
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: tickets-logstash
    restart: unless-stopped
    ports:
      - "5000:5000"
      - "9600:9600"
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - logs:/logs:ro
    networks:
      - logging_network
    depends_on:
      - elasticsearch

  # Backup Service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    image: tickets/backup:1.0.0
    container_name: tickets-backup
    restart: unless-stopped
    volumes:
      - postgres_data:/postgres_data:ro
      - uploads:/uploads:ro
      - ./backups:/backups
      - ./backup/scripts:/scripts:ro
    networks:
      - database_network
    environment:
      - DB_HOST=postgres
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - RETENTION_DAYS=30
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - postgres

  # Worker for Background Tasks
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    image: tickets/worker:1.0.0
    container_name: tickets-worker
    restart: unless-stopped
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    networks:
      - backend_network
      - database_network
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - WORKER_QUEUES=notifications,reports,cleanup
      - WORKER_CONCURRENCY=4
    depends_on:
      - postgres
      - redis

# Networks
networks:
  frontend_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.1.0/24
  
  backend_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.2.0/24
  
  database_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.3.0/24
  
  monitoring_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.4.0/24
  
  logging_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.5.0/24

# Volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/tickets/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/tickets/redis
  
  uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/tickets/uploads
  
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/tickets/logs
  
  nginx_logs:
    driver: local
  
  postgres_logs:
    driver: local
  
  haproxy_logs:
    driver: local
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
  
  elasticsearch_data:
    driver: local